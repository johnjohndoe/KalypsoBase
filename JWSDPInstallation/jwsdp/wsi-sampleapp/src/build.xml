<?xml version="1.0"?>

<!--
 Copyright (c) 2004 Sun Microsystems, Inc.
 All rights reserved. 
-->


<project name="WSI Sample App" default="help" basedir="..">

	<property name="jaxrpc.home" value="${jwsdp.home}/jaxrpc"/>
	<property name="jaxp.home" value="${jwsdp.home}/jaxp"/>
	<property name="jaxr.home" value="${jwsdp.home}/jaxr"/>
	<property name="saaj.home" value="${jwsdp.home}/saaj"/>
	<property name="jaxb.home" value="${jwsdp.home}/jaxb"/>
	<property name="shared.lib" value="${jwsdp.home}/jwsdp-shared/lib"/>

	<property name="common.lib" value="${jwsdp.home}/common/lib"/>
	<property name="common.endorsed" value="${jwsdp.home}/common/endorsed"/>

	<property name="name" value="wsi"/>
	
	<property name="src.home" value="${basedir}/src"/>
	<property name="lib.home" value="${basedir}/lib"/>
	<property name="build.home" value="${basedir}/build"/>
	<property name="log.home" value="${basedir}/logs"/>
	<property name="work.home" value="${build.home}/work"/>

	<property name="etc.home" value="${basedir}/etc"/>
	<property name="config.home" value="${etc.home}/config"/>
	<property name="wsdl.home" value="${etc.home}/wsdl"/>
	
	<property name="build.classes.home" value="${build.home}/classes"/>
	<property name="build.classes.client.home" value="${build.classes.home}/client"/>

	<property name="build.src.home" value="${build.home}/src"/>
	<property name="build.src.client.home" value="${build.src.home}/client"/>
	
	<property name="build.war.home" value="${build.home}/war"/>
	<property name="build.docs.home" value="${build.home}/docs"/>
	
	<property name="war.file.name" value="${name}-server.war" />

	<property name="debug" value="on" />
	<property name="optimize" value="on" />
	<property name="database" value="pointbase"/>

	<property file="${jwsdp.home}/conf/jwsdp.properties"/>

	<!-- Configuration files -->
	<property name="logging.model.config" value="${config.home}/logging-model-config.xml"/>
	<property name="retailer.model.config" value="${config.home}/retailer-model-config.xml"/>
	<property name="warehouse.model.config" value="${config.home}/warehouse-model-config.xml"/>
	<property name="manufacturer.model.config" value="${config.home}/manufacturer-model-config.xml"/>
	<property name="configurator.model.config" value="${config.home}/configurator-model-config.xml"/>
	<property name="catalog.model.config" value="${config.home}/catalog-model-config.xml"/>
	
	<path id="wspack.classpath">
		<!-- JAXRPC jars -->
		<pathelement location="${jaxrpc.home}/lib/jaxrpc-api.jar"/>
		<pathelement location="${jaxrpc.home}/lib/jaxrpc-impl.jar"/>
		<pathelement location="${jaxrpc.home}/lib/jaxrpc-spi.jar"/>
		<!-- JAXP jars -->
		<pathelement location="${jaxp.home}/lib/jaxp-api.jar"/>
		<pathelement location="${jaxp.home}/lib/endorsed/xercesImpl.jar"/>
		<pathelement location="${jaxp.home}/lib/endorsed/sax.jar"/>
		<pathelement location="${jaxp.home}/lib/endorsed/dom.jar"/>
		<pathelement location="${jaxp.home}/lib/endorsed/xalan.jar"/>
		<!-- JAXR jars -->
		<pathelement location="${jaxr.home}/lib/jaxr-api.jar"/>
		<pathelement location="${jaxr.home}/lib/jaxr-impl.jar"/>
		<!-- SAAJ jars -->
		<pathelement location="${saaj.home}/lib/saaj-api.jar"/>
		<pathelement location="${saaj.home}/lib/saaj-impl.jar"/>
		<!-- JAXB jars -->
		<pathelement location="${jaxb.home}/lib/jaxb-api.jar"/>
		<pathelement location="${jaxb.home}/lib/jaxb-impl.jar"/>
		<pathelement location="${jaxb.home}/lib/jaxb-xjc.jar"/>
		<pathelement location="${jaxb.home}/lib/jaxb-libs.jar"/> 
		<!-- Common jars -->
		<pathelement location="${shared.lib}/activation.jar"/>
		<pathelement location="${shared.lib}/mail.jar"/>
		<pathelement location="${shared.lib}/commons-logging.jar"/>
		<pathelement location="${shared.lib}/jax-qname.jar"/>
		<pathelement location="${shared.lib}/xsdlib.jar"/>
		<pathelement location="${shared.lib}/relaxngDatatype.jar"/>
		<pathelement location="${shared.lib}/namespace.jar"/>
		<!-- Servlet jar -->
		<pathelement location="${lib.home}/servlet-api.jar"/>
	</path>

	<path id="compile.classpath">
		<path refid="wspack.classpath"/>
		<pathelement location="${build.war.home}/client.jar"/>
	</path>

	<path id="run.classpath">
		<path refid="compile.classpath"/>
		<pathelement location="${java.home}/../lib/tools.jar"/>
	</path>

	<taskdef name="wscompile" classname="com.sun.xml.rpc.tools.ant.Wscompile">
		<classpath refid="wspack.classpath"/>
	</taskdef>
	<taskdef name="wsdeploy" classname="com.sun.xml.rpc.tools.ant.Wsdeploy">
		<classpath refid="wspack.classpath"/>
	</taskdef>
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
		<classpath refid="wspack.classpath"/>
	</taskdef>

	<target name="mkdirs">
		<mkdir dir="${build.home}"/>
		<mkdir dir="${build.src.home}"/>
		<mkdir dir="${build.src.client.home}"/>
		<mkdir dir="${build.classes.home}"/>
		<mkdir dir="${build.classes.client.home}"/>
		<mkdir dir="${build.war.home}"/>
		<mkdir dir="${work.home}"/>
	</target>

	<target name="server" depends="mkdirs, import-wsdls, gen-clients, compile-server, make-war"/>

	<!--
		Step 1: Generate interfaces and valuetypes (-import)
	-->
	<target name="import-wsdls">
		<echo message="Importing logging WSDL ..."/>
		<antcall target="import-wsdl">
			<param name="config.file" value="${logging.model.config}"/>
			<param name="model.file" value="logging.xml.gz"/>
		</antcall>

		<echo message="Importing retailer WSDL ..."/>
		<antcall target="import-wsdl">
			<param name="config.file" value="${retailer.model.config}"/>
			<param name="model.file" value="retailer.xml.gz"/>
		</antcall>

		<echo message="Importing warehouse WSDL ..."/>
		<antcall target="import-wsdl">
			<param name="config.file" value="${warehouse.model.config}"/>
			<param name="model.file" value="warehouse.xml.gz"/>
		</antcall>

		<echo message="Importing manufacturer WSDL ..."/>
		<antcall target="import-wsdl">
			<param name="config.file" value="${manufacturer.model.config}"/>
			<param name="model.file" value="manufacturer.xml.gz"/>
		</antcall>

		<echo message="Importing configurator WSDL ..."/>
		<antcall target="import-wsdl">
			<param name="config.file" value="${configurator.model.config}"/>
			<param name="model.file" value="configurator.xml.gz"/>
		</antcall>

		<echo message="Importing catalog WSDL ..."/>
		<antcall target="import-wsdl">
			<param name="config.file" value="${catalog.model.config}"/>
			<param name="model.file" value="catalog.xml.gz"/>
		</antcall>
	</target>

	<!--
		Step 2: Generate client-side artifacts from the model
                file generated in Step 1 and package them into
				a client.jar
	 -->
	<target name="gen-clients">
		<echo message="Generating logging client artifacts ..."/>
		<antcall target="gen-client">
			<param name="config.file" value="${logging.model.config}"/>
		</antcall>

		<echo message="Generating retailer client artifacts ..."/>
		<antcall target="gen-client">
			<param name="config.file" value="${retailer.model.config}"/>
		</antcall>

		<echo message="Generating warehouse client artifacts ..."/>
		<antcall target="gen-client">
			<param name="config.file" value="${warehouse.model.config}"/>
		</antcall>

		<echo message="Generating manufacturer client artifacts ..."/>
		<antcall target="gen-client">
			<param name="config.file" value="${manufacturer.model.config}"/>
		</antcall>

		<echo message="Generating configurator client artifacts ..."/>
		<antcall target="gen-client">
			<param name="config.file" value="${configurator.model.config}"/>
		</antcall>

		<echo message="Generating catalog client artifacts ..."/>
		<antcall target="gen-client">
			<param name="config.file" value="${catalog.model.config}"/>
		</antcall>

		<jar destfile="${build.war.home}/client.jar" basedir="${build.classes.client.home}"/>
	</target>

	<!--
		Step 3: Compile the service endpoint implementation classes
	-->
	<target name="compile-server" depends="compile-server-util">
		<!-- LoggingFacility -->
		<echo message="Compiling logging classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/logging"/>
			<param name="src.files" value="GetEventsFaultType.java, LoggingFacilityLogPortType.java, LoggingFacilityLogPortTypeImpl.java"/>
		</antcall>

		<!-- Manufacturer -->
		<echo message="Compiling manufacturer classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/manufacturer"/>
			<param name="src.files" value="*.java"/>
		</antcall>

		<!-- Warehouse -->
		<echo message="Compiling warehouse classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/warehouse"/>
			<param name="src.files" value="*.java"/>
		</antcall>

		<!-- Retailer -->
		<echo message="Compiling retailer classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/retailer"/>
			<param name="src.files" value="RetailerPortTypeImpl.java"/>
		</antcall>

		<!-- Configurator -->
		<echo message="Generating Configurator Cache classes ..."/>
		<xjc
			package="com.sun.wsi.scm.configurator.cache"
			target="${build.src.home}"
			schema="${etc.home}/cache.xsd"/>
		<echo message="Compiling generated Configurator Cache classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${build.src.home}/com/sun/wsi/scm/configurator"/>
			<param name="src.files" value="**/*.java"/>
		</antcall>
		<echo message="Compiling cofigurator classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/configurator"/>
			<param name="src.files" value="ConfiguratorPortTypeImpl.java"/>
		</antcall>

		<!-- Catalog -->
		<echo message="Compiling catalog classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/catalog"/>
			<param name="src.files" value="AttachmentConverter.java, CatalogPortTypeImpl.java"/>
		</antcall>
	</target>

	<target name="compile-server-util">
		<!-- Compile the utility classes for server-side -->
		<echo message="Compiling utility classes ..."/>
		<antcall target="compile-server-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/util"/>
			<param name="src.files" value="*.java"/>
		</antcall>
	</target>

	<target name="compile-client-util">
		<!-- Compile the utility classes for client.jar -->
		<antcall target="compile-client-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/util"/>
			<param name="src.files" value="*.java"/>
		</antcall>
	</target>

	<target name="make-war" depends="make-raw-war, make-cooked-war, deploy"/>

	<!--
		Step 4: Create a raw war consisting of
				- the generated interfaces and valuetypes
				- service endpoint implementation classes
				- client.jar in WEB-INF/lib
	-->
	<target name="make-raw-war">
		<echo message="Creating a raw war ..."/>
		<copy file="${etc.home}/${database}.db.props" toFile="${work.home}/db.props" overwrite="true"/>
		<copy file="${etc.home}/war-index.html" toFile="${work.home}/index.html"/>
		<war warfile="${build.war.home}/${name}-raw.war" webxml="${config.home}/web.xml">
			<classes dir="${build.classes.home}" includes="com/**"/>
			
			<classes dir="${build.src.home}"
				includes="com/sun/wsi/scm/configurator/cache/jaxb.properties"/>
			<webinf dir="${wsdl.home}" includes="*Impl.wsdl, Catalog.wsdl, Catalog.xsd, WS-ISwA.xsd"/>
			<webinf dir="${config.home}" includes="jaxrpc-ri.xml"/>
			<webinf
				dir="${work.home}"
				includes="retailer.xml.gz, logging.xml.gz, warehouse.xml.gz, manufacturer.xml.gz, configurator.xml.gz, catalog.xml.gz"/>
			<lib dir="${build.war.home}" includes="client.jar"/>	
			<zipfileset
				dir="${etc.home}"
				includes="endpoints.xml, logging.properties, uddi-config.props"
				prefix="conf"/>
			<zipfileset
				dir="${work.home}"
				includes="db.props"
				prefix="conf"/>

			<zipfileset
				dir="${src.home}"
				includes="com/sun/wsi/scm/resources/**"
				excludes="com/sun/wsi/scm/resources/*.client.properties"
				prefix="conf"/>

			<zipfileset
				dir="${etc.home}/images"
				includes="*"
				prefix="images"/>

			<zipfileset
				dir="${etc.home}/specsheet"
				includes="*.xml"
				prefix="specsheet"/>
				
			<zipfileset
				dir="${work.home}"
				includes="index.html"/>
		</war>
	</target>

	<!--
		Step 5: Create a cooked war
	-->
	<target name="make-cooked-war">
		<echo message="Creating a cooked war ..."/>
		<wsdeploy
			keep="true"
			tmpDir="${work.home}"
			inWarFile="${build.war.home}/${name}-raw.war"
			outWarFile="${build.war.home}/${war.file.name}">
			<classpath refid="run.classpath"/>
		</wsdeploy>
	</target>
	
	<target name="client" depends="mkdirs, gen-clients, compile-client-util, compile-retailer-client, compile-configurator-client, compile-catalog-client, make-client-jar"/>

	<target name="compile-retailer-client">
		<echo message="Generating classes ..."/>
		<xjc
			package="com.sun.wsi.scm.retailer.order"
			target="${build.src.client.home}"
			schema="${etc.home}/retailer-config.xsd"/>

		<echo message="Generating retailer vendor classes ..."/>
		<xjc
			package="com.sun.wsi.scm.retailer.vendor"
			target="${build.src.client.home}"
			schema="${etc.home}/vendor-config.xsd"/>

		<echo message="Compiling generated classes ..."/>
		<antcall target="compile-client-template">
			<param name="src.home" value="${build.src.client.home}/com/sun/wsi/scm/retailer/order"/>
			<param name="src.files" value="**/*.java"/>
		</antcall>
		<antcall target="compile-client-template">
			<param name="src.home" value="${build.src.client.home}/com/sun/wsi/scm/retailer/vendor"/>
			<param name="src.files" value="**/*.java"/>
		</antcall>

		<echo message="Compiling retailer client classes ..."/>
		<antcall target="compile-client-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/retailer"/>
			<param name="src.files" value="RetailerClient.java"/>
		</antcall>
	</target>

	<target name="compile-configurator-client" depends="mkdirs">
		<echo message="Compiling configurator client classes ..."/>
		<antcall target="compile-client-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/configurator"/>
			<param name="src.files" value="WSIQuery.java"/>
		</antcall>
	</target>

	<target name="compile-catalog-client" depends="compile-client-util">
		<echo message="Compiling catalog client classes ..."/>
		<antcall target="compile-client-template">
			<param name="src.home" value="${src.home}/com/sun/wsi/scm/catalog"/>
			<param name="src.files" value="AttachmentHelper.java, CatalogClient.java"/>
		</antcall>
	</target>

	<target name="make-client-jar">
		<jar destfile="${basedir}/lib/wsi-client.jar">
			<fileset dir="${build.classes.client.home}"
			includes="com/sun/wsi/scm/retailer/**/*.class, com/sun/wsi/scm/configuration/**/*.class, com/sun/wsi/scm/logging/**/*.class, com/sun/wsi/scm/util/**/*.class, com/sun/wsi/scm/configurator/**/*.class, com/sun/wsi/scm/catalog/**/*.class"/>
			<fileset dir="${build.src.client.home}"
				includes="com/sun/wsi/scm/retailer/order/jaxb.properties, com/sun/wsi/scm/retailer/vendor/jaxb.properties"/>
		</jar>
	</target>

	<!-- Common targets -->
	<!--
		@param: model.file
		@param: config.file
	-->
	<target name="import-wsdl">
		<wscompile
			keep="true"
			import="true"
			base="${build.classes.home}"
			sourceBase="${build.src.home}"
			xPrintStackTrace="true"
			model="${work.home}/${model.file}"
			features="explicitcontext, wsi"
			HTTPProxy="${http.proxyHost}:${http.proxyPort}"
			config="${config.file}">
			<classpath refid="compile.classpath"/>
		</wscompile>
	</target>
	
	<!--
		@param: config.file
	-->
	<target name="gen-client">
		<wscompile
			keep="true"
			client="true"
			base="${build.classes.client.home}"
			sourceBase="${build.src.client.home}"
			xPrintStackTrace="true"
			features="explicitcontext, wsi"
			HTTPProxy="${http.proxyHost}:${http.proxyPort}"
			config="${config.file}">
			<classpath refid="compile.classpath"/>
		</wscompile>
	</target>
	
	<!--
		@param: src.home
		@param: src.files
	-->
	<target name="compile-server-template">
		<javac
			srcdir="${src.home}"
			destdir="${build.classes.home}"
			debug="${debug}"
			includes="${src.files}">
			<classpath>
				<path refid="compile.classpath"/>
				<pathelement path="${build.classes.home}"/>
			</classpath>
		</javac>
	</target>
	
	<!--
		@param: src.home
		@param: src.files
	-->
	<target name="compile-client-template">
		<javac
			srcdir="${src.home}"
			destdir="${build.classes.client.home}"
			debug="${debug}"
			includes="${src.files}">
			<classpath>
				<path refid="compile.classpath"/>
				<pathelement path="${build.classes.client.home}"/>
			</classpath>
		</javac>
	</target>
	
	<target name="deploy">
		<copy file="${build.war.home}/${war.file.name}"
		toDir="${jwsdp.home}/wsi-sampleapp" overwrite="yes"/>
	</target>
	
	<target name="clean">
		<echo message="Cleaning up ..."/>
		<delete includeEmptyDirs="true" quiet="yes">
			<fileset dir="${build.home}"/>
			<fileset dir="${log.home}" includes="**/*"/>
		</delete>
		<echo message="Cleaning done ..."/>
	</target>
	
	<target name="repackage-war">
		<tempfile property="tmpdir" destDir="${log.home}"/>
		<unjar src="wsi-server.war" dest="${tmpdir}"/>
		<copy file="etc/${database}.db.props" toFile="${tmpdir}/conf/db.props" overwrite="true"/>
		<war destfile="wsi-server.war" update="true" basedir="${tmpdir}"/>
		<delete dir="${tmpdir}"/>
	</target>

	<target name="help">
		<echo message="server:            Builds the server-side war file"/>
		<echo message="client:            Builds the client-side jar file"/>
		<echo message="clean:             Cleans up all the generated files"/>
		<echo message="repackage-war:     Repackages the war file for a specific database server"/>
		<echo message="help:              Prints this message"/>
	</target>

</project>

