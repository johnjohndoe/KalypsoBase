<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.opengis.net/se" xmlns:se="http://www.opengis.net/se" xmlns:gml="http://www.opengis.net/gml" xmlns:ogc="http://www.opengis.net/ogc" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xsd:include schemaLocation="common.xsd"/>
	
	<!-- *********************************************************************** -->
	<xsd:annotation>
		<xsd:documentation> 
      SE Symbolizer version 1.1.0 (2006-07-20)
    </xsd:documentation>
	</xsd:annotation>
	<xsd:element name="Symbolizer" type="se:SymbolizerType" abstract="true"/>
	<xsd:complexType name="SymbolizerType" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
        A "SymbolizerType" is an abstract type for encoding the graphical
        properties used to portray geographic information.  Concrete Symbolizer
        types are derived from this base type.
      </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="se:Name" minOccurs="0"/>
			<xsd:element ref="se:Description" minOccurs="0"/>
			<xsd:element ref="se:BaseSymbolizer" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute name="version" type="se:VersionType"/>
		<xsd:attribute name="uom" type="xsd:anyURI"/>
	</xsd:complexType>
	<xsd:element name="BaseSymbolizer" type="se:BaseSymbolizerType">
		<xsd:annotation>
			<xsd:documentation>
        A "BaseSymbolizer" defines the default properties of a Symbolizer to
        be those of an external Symbolizer, which will frequently be inside
        of an OGC Symbolizer repository.  The Symbolizer properties given
        in-line override the base-Symbolizer properties.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="BaseSymbolizerType">
		<xsd:sequence>
			
		</xsd:sequence>
	</xsd:complexType>
	<!-- *********************************************************************** -->
	<xsd:annotation>
		<xsd:documentation>
      LINE Symbolizer
    </xsd:documentation>
	</xsd:annotation>
	<xsd:element name="LineSymbolizer" type="se:LineSymbolizerType" substitutionGroup="se:Symbolizer">
		<xsd:annotation>
			<xsd:documentation>
        A LineSymbolizer is used to render a "stroke" along a linear geometry.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="LineSymbolizerType">
		<xsd:complexContent>
			<xsd:extension base="se:SymbolizerType">
				<xsd:sequence>
					<xsd:element ref="se:Geometry" minOccurs="0"/>
					<xsd:element ref="se:Stroke" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Geometry" type="se:GeometryType">
		<xsd:annotation>
			<xsd:documentation>
        A Geometry gives reference to a (the) geometry property of a
        feature to be used for rendering.
			</xsd:documentation>
			<xsd:documentation>
				This was removed as there are not features inside and we want to get rid of gml references
			</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="GeometryType">
		<xsd:sequence>
			
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="Stroke" type="se:StrokeType">
		<xsd:annotation>
			<xsd:documentation>
        A "Stroke" specifies the appearance of a linear geometry.  It is
        defined in parallel with SVG strokes.  The following SvgParameters
        may be used: "stroke" (color), "stroke-opacity", "stroke-width",
        "stroke-linejoin", "stroke-linecap", "stroke-dasharray", and
        "stroke-dashoffset".  Others are not officially supported.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="StrokeType">
		<xsd:sequence>
			<xsd:choice minOccurs="0">
				<xsd:element ref="se:GraphicFill"/>
				<xsd:element ref="se:GraphicStroke"/>
			</xsd:choice>
			<xsd:element ref="se:SvgParameter" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="SvgParameter" type="se:SvgParameterType">
		<xsd:annotation>
			<xsd:documentation>
        A "SvgParameter" refers to an SVG/CSS graphical-formatting
        parameter.  The parameter is identified using the "name" attribute
        and the content of the element gives the SVG/CSS-coded value.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="SvgParameterType" mixed="true">
		<xsd:complexContent mixed="true">
			<xsd:extension base="se:ParameterValueType">
				<xsd:attribute name="name" type="xsd:string" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="ParameterValueType" mixed="true">
		<xsd:annotation>
			<xsd:documentation>
        The "ParameterValueType" uses WFS-Filter expressions to give
        values for SE graphic parameters.  A "mixed" element-content
        model is used with textual substitution for values.
      </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="GraphicFill" type="se:GraphicFillType">
		<xsd:annotation>
			<xsd:documentation>
        A "GraphicFill" defines repeated-graphic filling (stippling)
        pattern for an area geometry.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="GraphicFillType">
		<xsd:sequence>
			<xsd:element ref="se:Graphic"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="GraphicStroke" type="se:GraphicStrokeType">
		<xsd:annotation>
			<xsd:documentation>
        A "GraphicStroke" defines a repeated-linear graphic pattern to be used
        for stroking a line.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="GraphicStrokeType">
		<xsd:sequence>
			<xsd:element ref="se:Graphic"/>
			<xsd:element ref="se:InitialGap" minOccurs="0"/>
			<xsd:element ref="se:Gap" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="InitialGap" type="se:ParameterValueType">
		<xsd:annotation>
			<xsd:documentation>
       Initialgap defines the initial empty space, before the first Graphic or Label should be rendered.
    </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Gap" type="se:ParameterValueType">
		<xsd:annotation>
			<xsd:documentation>
      Gap defines the empty space between two Graphics or Labels.
    </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!-- *********************************************************************** -->
	<xsd:annotation>
		<xsd:documentation>
      POLYGON Symbolizer
    </xsd:documentation>
	</xsd:annotation>
	<xsd:element name="PolygonSymbolizer" type="se:PolygonSymbolizerType" substitutionGroup="se:Symbolizer">
		<xsd:annotation>
			<xsd:documentation>
        A "PolygonSymbolizer" specifies the rendering of a polygon or
        area geometry, including its interior fill and border stroke.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="PolygonSymbolizerType">
		<xsd:complexContent>
			<xsd:extension base="se:SymbolizerType">
				<xsd:sequence>
					<xsd:element ref="se:Geometry" minOccurs="0"/>
					<xsd:element ref="se:Fill" minOccurs="0"/>
					<xsd:element ref="se:Stroke" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Fill" type="se:FillType">
		<xsd:annotation>
			<xsd:documentation>
        A "Fill" specifies the pattern for filling an area geometry.
        The allowed SvgParameters are: "fill" (color) and "fill-opacity".
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="FillType">
		<xsd:sequence>
			<xsd:element ref="se:GraphicFill" minOccurs="0"/>
			<xsd:element ref="se:SvgParameter" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- *********************************************************************** -->
	<xsd:annotation>
		<xsd:documentation>
      POINT Symbolizer
    </xsd:documentation>
	</xsd:annotation>
	<xsd:element name="PointSymbolizer" type="se:PointSymbolizerType" substitutionGroup="se:Symbolizer">
		<xsd:annotation>
			<xsd:documentation>
        A "PointSymbolizer" specifies the rendering of a "graphic Symbolizer"
        at a point.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="PointSymbolizerType">
		<xsd:complexContent>
			<xsd:extension base="se:SymbolizerType">
				<xsd:sequence>
					<xsd:element ref="se:Geometry" minOccurs="0"/>
					<xsd:element ref="se:Graphic" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Graphic" type="se:GraphicType">
		<xsd:annotation>
			<xsd:documentation>
        A "Graphic" specifies or refers to a "graphic Symbolizer" with inherent
        shape, size, and coloring.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="GraphicType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element ref="se:ExternalGraphic"/>
				<xsd:element ref="se:Mark"/>
			</xsd:choice>
			<xsd:element ref="se:Opacity" minOccurs="0"/>
			<xsd:element ref="se:Size" minOccurs="0"/>
			<xsd:element ref="se:Rotation" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="Opacity" type="se:ParameterValueType"/>
	<xsd:element name="Size" type="se:ParameterValueType"/>
	<xsd:element name="Rotation" type="se:ParameterValueType"/>
	<xsd:element name="ExternalGraphic" type="se:ExternalGraphicType">
		<xsd:annotation>
			<xsd:documentation>
        An "ExternalGraphic" gives a reference to a raster or vector
        graphical object, either online or inline, in an externally-defined
        graphic format.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="ExternalGraphicType">
		<xsd:sequence>
			<xsd:choice>
				
				<xsd:element ref="se:InlineContent"/>
			</xsd:choice>
			<xsd:element ref="se:Format"/>
			
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="Format" type="xsd:string"/>
	
	
	<xsd:element name="Mark" type="se:MarkType">
		<xsd:annotation>
			<xsd:documentation>
        A "Mark" specifies a geometric shape and applies coloring to it.
      </xsd:documentation> 
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="MarkType">
		<xsd:sequence>
			<xsd:choice minOccurs="0">
				<xsd:element ref="se:WellKnownName"/>
				<xsd:sequence>
					<xsd:choice>
						
						<xsd:element ref="se:InlineContent"/>
					</xsd:choice>
					<xsd:element ref="se:Format"/>
					<xsd:element ref="se:MarkIndex" minOccurs="0"/>
				</xsd:sequence>
			</xsd:choice>
			<xsd:element ref="se:Fill" minOccurs="0"/>
			<xsd:element ref="se:Stroke" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="WellKnownName" type="xsd:string"/>
	<xsd:element name="MarkIndex" type="xsd:integer"/>
	<!-- *********************************************************************** -->
	<xsd:annotation>
		<xsd:documentation>
      TEXT Symbolizer
    </xsd:documentation>
	</xsd:annotation>
	<xsd:element name="TextSymbolizer" type="se:TextSymbolizerType" substitutionGroup="se:Symbolizer">
		<xsd:annotation>
			<xsd:documentation>
        A "TextSymbolizer" is used to render text labels according to
        various graphical parameters.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="TextSymbolizerType">
		<xsd:complexContent>
			<xsd:extension base="se:SymbolizerType">
				<xsd:sequence>
					<xsd:element ref="se:Geometry" minOccurs="0"/>
					<xsd:element ref="se:Label" minOccurs="0"/>
					<xsd:element ref="se:Font" minOccurs="0"/>
					<xsd:element ref="se:LabelPlacement" minOccurs="0"/>
					<xsd:element ref="se:Halo" minOccurs="0"/>
					<xsd:element ref="se:Fill" minOccurs="0"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="Label" type="se:ParameterValueType">
		<xsd:annotation>
			<xsd:documentation>
        A "Label" specifies the textual content to be rendered.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Font" type="se:FontType">
		<xsd:annotation>
			<xsd:documentation>
        A "Font" element specifies the text font to use.  The allowed
        SvgParameters are: "font-family", "font-style", "font-weight",
        and "font-size".
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="FontType">
		<xsd:sequence>
			<xsd:element ref="se:SvgParameter" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="LabelPlacement" type="se:LabelPlacementType">
		<xsd:annotation>
			<xsd:documentation>
        The "LabelPlacement" specifies where and how a text label should
        be rendered relative to a geometry.  The present mechanism is
        poorly aligned with CSS/SVG.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="LabelPlacementType">
		<xsd:choice>
			<xsd:element ref="se:PointPlacement"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name="PointPlacement" type="se:PointPlacementType">
		<xsd:annotation>
			<xsd:documentation>
        A "PointPlacement" specifies how a text label should be rendered
        relative to a geometric point.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="PointPlacementType">
		<xsd:sequence>
			<xsd:element ref="se:Rotation" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	
	
	
	<xsd:element name="Displacement" type="se:DisplacementType">
		<xsd:annotation>
			<xsd:documentation>
        A "Displacement" gives X and Y offset displacements to use for
        rendering a text label, graphic or other Symbolizernear a point.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="DisplacementType">
		<xsd:sequence>
			<xsd:element ref="se:DisplacementX"/>
			<xsd:element ref="se:DisplacementY"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="DisplacementX" type="se:ParameterValueType"/>
	<xsd:element name="DisplacementY" type="se:ParameterValueType"/>
	
	
	
	<xsd:element name="PerpendicularOffset" type="se:ParameterValueType">
		<xsd:annotation>
			<xsd:documentation>
        A "PerpendicularOffset" gives the perpendicular distance away
        from a line to draw a label.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Halo" type="se:HaloType">
		<xsd:annotation>
			<xsd:documentation>
        A "Halo" fills an extended area outside the glyphs of a rendered
        text label to make the label easier to read over a background.
      </xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="HaloType">
		<xsd:sequence>
			<xsd:element ref="se:Radius" minOccurs="0"/>
			<xsd:element ref="se:Fill" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="Radius" type="se:ParameterValueType"/>
</xsd:schema>
